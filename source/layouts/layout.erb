<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    
    <!-- Always force latest IE rendering engine or request Chrome Frame -->
    <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
    
    <!-- Use title if it's in the page YAML frontmatter -->
    <title><%= current_page.data.title || "Women in Tech" %></title>
    
    <%= stylesheet_link_tag "styles" %>
    <%= javascript_include_tag  "all" %>
    <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
    <%= javascript_include_tag  "nv.d3.min" %>
   <script>
nv.addGraph(function() {
  var degreeChart = nv.models.pieChart()
      .x(function(d) { return d.degree })
      .y(function(d) { return d.percent })
      .tooltipContent(function (key, y, e, graph) {
          return '<h3>' + Math.round(y) + '%</h3>';
      })
      .showLabels(true)     //Display pie labels
      .showLegend(false)
      .color(["#edd6d8","#edc3c6","#edabb0","#ed949a","#ed7a82","#ed646f","#ed515d","#ed3543","#ed2635","#ed1525"]);

    d3.select("#degrees svg")
        .datum(degrees)
        .transition().duration(1200)
        .call(degreeChart);

  var humanChart = nv.models.pieChart()
      .x(function(d) { return d.gender })
      .y(function(d) { return d.percent })
      .tooltipContent(function (key, y, e, graph) {
          return '<h3>' + Math.round(y) + '%</h3>';
      })
      .showLabels(true)     //Display pie labels
      .showLegend(false)
      .height(400)
      .color(["#edd6d8","#edc3c6","#edabb0","#ed949a","#ed7a82","#ed646f","#ed515d","#ed3543","#ed2635","#ed1525"]);

    d3.select("#humanSciences svg")
        .datum(humanSciences)
        .transition().duration(1200)
        .call(humanChart);

  var engineerChart = nv.models.pieChart()
      .x(function(d) { return d.gender })
      .y(function(d) { return d.percent })
      .tooltipContent(function (key, y, e, graph) {
          return '<h3>' + Math.round(y) + '%</h3>';
      })
      .showLabels(true)     //Display pie labels
      .showLegend(false)
      .height(400)
      .color(["#edd6d8","#edc3c6","#edabb0","#ed949a","#ed7a82","#ed646f","#ed515d","#ed3543","#ed2635","#ed1525"]);

    d3.select("#engineering svg")
        .datum(engineering)
        .transition().duration(1200)
        .call(engineerChart);

  var womenPerTeamChart = nv.models.discreteBarChart()
      .x(function(d) { return d.label })    //Specify the data accessors.
      .y(function(d) { return d.percent })
      .tooltips(false)        //Don't show tooltips
      .showValues(true)       //...instead, show the bar value right on top of each bar.
      .transitionDuration(350)
      .height(500)
      .width(1000)
      .forceY([0,100])

      .color(["#edd6d8","#edc3c6","#edabb0","#ed949a","#ed7a82","#ed646f","#ed515d","#ed3543","#ed2635","#ed1525"]);
    womenPerTeamChart.yAxis.axisLabel('Percent').axisLabelDistance(40);
    womenPerTeamChart.xAxis.axisLabel('Team Size').axisLabelDistance(40);

  d3.select('#womenPerTeam svg')
      .datum(womenPerTeam())
      .call(womenPerTeamChart);

  var womenQuittingChart = nv.models.discreteBarChart()
      .x(function(d) { return d.label })    //Specify the data accessors.
      .y(function(d) { return d.percent })
      .tooltips(false)        //Don't show tooltips
      .showValues(true)       //...instead, show the bar value right on top of each bar.
      .transitionDuration(350)
      .height(400)
      .width(700)
      .forceY([0,100])

      .color(["#edd6d8","#edc3c6","#edabb0","#ed949a","#ed7a82","#ed646f","#ed515d","#ed3543","#ed2635","#ed1525"]);
    womenPerTeamChart.yAxis.axisLabel('Percent').axisLabelDistance(40);
    womenPerTeamChart.xAxis.axisLabel('Field').axisLabelDistance(40);

  d3.select('#womenQuitting svg')
      .datum(womenQuitting())
      .call(womenQuittingChart);

/*These lines are all chart setup.  Pick and choose which chart features you want to utilize. */
nv.addGraph(function() {
  var chart = nv.models.lineChart()
                .margin({left: 100})  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(true)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)        //Show the y-axis
                .showXAxis(true)        //Show the x-axis
  ;

  chart.xAxis     //Chart x-axis settings
      .axisLabel('Time (ms)')
      .tickFormat(d3.format(',r'));

  chart.yAxis     //Chart y-axis settings
      .axisLabel('Voltage (v)')
      .tickFormat(d3.format('.02f'));

  /* Done setting the chart up? Time to render it!*/
  var myData = sinAndCos();   //You need data...

  d3.select('#chart svg')    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

  //Update the chart when window resizes.
  nv.utils.windowResize(function() { chart.update() });
  return chart;
});
/**************************************
 * Simple test data generator
 */
function sinAndCos() {
  var sin = [],sin2 = [],
      cos = [];

  //Data is represented as an array of {x,y} pairs.
  for (var i = 0; i < 100; i++) {
    sin.push({x: i, y: Math.sin(i/10)});
    sin2.push({x: i, y: Math.sin(i/10) *0.25 + 0.5});
    cos.push({x: i, y: .5 * Math.cos(i/10)});
  }

  //Line chart data should be sent as an array of series objects.
  return [
    {
      values: sin,      //values - represents the array of {x,y} data points
      key: 'Sine Wave', //key  - the name of the series.
      color: '#ff7f0e'  //color - optional: choose your own line color.
    },
    {
      values: cos,
      key: 'Cosine Wave',
      color: '#2ca02c'
    },
    {
      values: sin2,
      key: 'Another sine wave',
      color: '#7777ff',
      area: true      //area - set to true if you want this line to turn into a filled area chart.
    }
  ];
}

});

humanSciences = [
  {
    "gender":"Men",
    "percent": 12
  },
  {
    "gender": "Women",
    "percent": 88
  }
]

engineering = [
  {
    "gender":"Men",
    "percent": 83
  },
  {
    "gender": "Women",
    "percent": 17
  }
]

degrees = [
    {
    "degree": "Business",
        "percent": 22,
        "description": "management, marketing, and personal and culis"
  },
  {
    "degree": "Social Studies",
    "percent": 10,
    "description": "social science and history"
  },
  {
    "degree": "Healthcare",
    "percent": 8,
    "description": "health professions and related programs"
  },
  {
    "degree": "Education",
    "percent": 6,
    "description": ""
  },
  {
    "degree": "Psychology",
    "percent": 6,
    "description": ""
  },
  {
    "degree": "Visual Arts",
    "percent": 6,
    "description": "performing arts"
  },
  {
    "degree": "Engineering",
    "percent": 5,
    "description": "engineering technologies"
  },
  {
    "degree": "Biology",
    "percent": 5,
    "description": "biomedical science"
  },
  {
    "degree": "Communication",
    "percent": 5,
    "description": "communications technologies"
  },
  {
    "degree": "Computers",
    "percent": 3.5,
    "description": "information sciences and support"
  },
  {
    "degree": "English",
    "percent": 3.5,
    "description": "language and literature"
  },
  {
    "degree": "Liberal Arts",
    "percent": 3,
    "description": "general studies and humanities"
  },
  {
    "degree": "Multicultural",
    "percent": 3,
    "description": "interdisciplinary studies"
  },
  {
    "degree": "Law Enforcement",
    "percent": 2,
    "description": "homeland security, firefighting and related protective services"
  },
  {
    "degree": "Agriculture",
    "percent": 2,
    "description": "natural resources"
  },
  {
    "degree": "Other",
    "percent": 4,
    "description": "all other college majors"
  }
]
function womenPerTeam() {
 return  [ 
    {
      key: "Women per team",
      values: [
  {
    "label":"1-9",
    "percent": 20
  },
  {
    "label": "10-24",
    "percent": 15
  },
  {
    "label": "15-49",
    "percent": 13
  },
  {
    "label": "50-99",
    "percent": 15
  },
  {
    "label": "100+",
    "percent": 10
    },
      ]
    }
  ]
}

function womenQuitting() {
  return [
  {
    key: "women quitting",
    values: [
      {
        "label": "Science",
        "percent": 47
      },
      {
        "label": "Engineering",
        "percent": 39
      },
      {
        "label": "Technology",
        "percent": 56
      }
    ]

  }
  ]
}

</script>


  </head>
  
  <body class="<%= page_classes %>">
    <%= yield %>
  </body>
</html>